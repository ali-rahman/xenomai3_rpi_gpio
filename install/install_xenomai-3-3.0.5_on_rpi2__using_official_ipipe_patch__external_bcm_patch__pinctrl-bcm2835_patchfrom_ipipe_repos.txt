

credits :
--------
 documentation how to build kernel for raspbian:
    https://www.raspberrypi.org/documentation/linux/kernel/building.md


 based on 
  http://www.blaess.fr/christophe/2016/05/22/xenomai-3-sur-raspberry-pi-2/
  http://wiki.csie.ncku.edu.tw/embedded/xenomai#xenomai-3-on-raspberry-pi-3
 and 
  - added my modifications to drivers/xenomai/gpio/Kconfig to get gpio to work on rpi2 
  - added extra a patched version of pinctrl-bcm2835.c from the official ipipe patch
    for the  rpi1 which uses the same gpio-chip as the rpi2 :
    
      wget -O pinctrl-bcm2835.c  http://git.xenomai.org/ipipe.git/plain/drivers/pinctrl/bcm/pinctrl-bcm2835.c?h=vendors/raspberry/ipipe-4.1

    => install/patches_for_pi2+/pinctrl-bcm2835.c in this repository

 notes: 
    both ipipe patch and xenomai code can be downloaded separately at : http://xenomai.org/downloads/
    note: ipipe patch used to be included in xenomai, but isn't anymore ; see the README:
     # http://git.xenomai.org/xenomai-3.git/tree/kernel/cobalt/arch/arm/README?h=v3.0.5
     #  Get the interrupt pipeline code for the target kernel from
     #  http://xenomai.org/downloads/ipipe/, or                                          <== use this
     #  git://git.xenomai.org/ipipe.git


https://courses.linuxchix.org/kernel-hacking-2002/08-overview-kernel-source.html
 -> overview of directory hierarchy in source of linux kernel
 
 


  arch/

      All the architecture specific code is in this directory and in the include/asm-<arch> directories. Each
      architecture has its own directory underneath this directory. For example, the code for a PowerPC based computer
      would be found under arch/ppc. You will find low-level memory management, interrupt handling, early
      initialization, assembly routines, and much more in these directories.

     => below in step 2b. we patch arm architecture
      
         # 2b. apply raspberry pi specific patch  to kernel  (patch of Mathieu Rondonneau specific for rpi2 bcm-2709 )
         #    http://www.blaess.fr/christophe/files/article-2016-05-22/patch-xenomai-3-on-bcm-2709.patch
         # patch applies on files :  (applies purely in kernel, doesn't effect drivers )
         #  arch/arm/Kconfig
         #  arch/arm/mach-bcm2709/armctrl.c
         #  arch/arm/mach-bcm2709/bcm2708_gpio.c
         #  arch/arm/mach-bcm2709/bcm2709.c
         #  arch/arm/mach-bcm2709/include/mach/entry-macro.S

  drivers/

      As a general rule, code to run peripheral devices is found in subdirectories of this directory. This includes
      video drivers, network card drivers, low-level SCSI drivers, and other similar things. For example, most network
      card drivers are found in drivers/net. Some higher level code to glue all the drivers of one type together may or
      may not be included in the same directory as the low-level drivers themselves.
  
     => below in step 2c we patch driver code for pinctrl for rpi specific:
     
          # 2c. apply a patched version of pinctrl-bcm2835.c from the official ipipe patch from the specific branch vendors/raspberry/ipipe-4.1
          #     https://gitlab.denx.de/Xenomai/ipipe/raw/vendors/raspberry/ipipe-4.1/drivers/pinctrl/bcm/pinctrl-bcm2835.c
          #    for the  rpi1 which uses the same gpio-chip as the rpi2 to the source :
          # patch applies on files :
          #     linux/drivers/pinctrl/bcm/pinctrl-bcm2835.c 
      

built raspbian linux kernel with xenomai patch         
==============================================   

# ingredients:
# - xenomai-3-3.0.5 
# - raspbian linux 4.1.y                                                                      \
# - ipipe-core-4.1.18-arm-9.fixed.patch                                                       | -> all 4.1 !!
# - pinctrl-bcm2835.c  from xenomai/ipipe's rpi specific branch 'vendors/raspberry/ipipe-4.1'      /
                             `-> https://gitlab.denx.de/Xenomai/ipipe/raw/vendors/raspberry/ipipe-4.1/drivers/pinctrl/bcm/pinctrl-bcm2835.c
# 0. prepare 
# ------------

export BUILDDIR=/var/tmp/rpi2
# build kernel with NUMCORES
export NUMCORES=4


mkdir $BUILDDIR   # place where download and build everything  
mkdir  $BUILDDIR/dist  # for ready to install files

# 1. get sources 
#---------------
#
# 1a. get raspbian linux 4.1.y
#
cd $BUILDDIR
git clone https://github.com/raspberrypi/linux.git
cd  linux/
git  checkout  rpi-4.1.y

# $ cat include/config/kernel.release
# 4.1.21-v7+         # full version -> also directory for in /lib/modules/

cd ..
#
# 1b. get xenomai source (effects only linux kernel)
wget http://git.xenomai.org/xenomai-3.git/snapshot/xenomai-3-3.0.5.tar.bz2
tar -xjvf xenomai-3-3.0.5.tar.bz2
#
# 1c. get ipipe  patch  (effects both kernel and some drivers(using interrupts))
wget http://xenomai.org/downloads/ipipe/v4.x/arm/ipipe-core-4.1.18-arm-9.patch
# get patched ipipe (small trivial fix)
wget https://raw.githubusercontent.com/harcokuppens/xenomai3_rpi_gpio/master/install/patches_for_pi2+/ipipe-core-4.1.18-arm-9.fixed.patch
# 
# 1d. raspberry pi specific patch  to kernel  (patch of Mathieu Rondonneau specific for rpi2 bcm-2709 )
wget  http://www.blaess.fr/christophe/files/article-2016-05-22/patch-xenomai-3-on-bcm-2709.patch
# patch applies on files :  (applies purely in kernel, doesn't effect drivers )
#  arch/arm/Kconfig
#  arch/arm/mach-bcm2709/armctrl.c
#  arch/arm/mach-bcm2709/bcm2708_gpio.c
#  arch/arm/mach-bcm2709/bcm2709.c
#  arch/arm/mach-bcm2709/include/mach/entry-macro.S
#
# 1e. a patched version of pinctrl-bcm2835.c from the official ipipe patch but from the specific branch vendors/raspberry/ipipe-4.1
#     for the  rpi1 which uses the same gpio-chip as the rpi2 : 
#wget -O pinctrl-bcm2835.c  http://git.xenomai.org/ipipe.git/plain/drivers/pinctrl/bcm/pinctrl-bcm2835.c?h=vendors/raspberry/ipipe-4.1
wget -O pinctrl-bcm2835.c https://gitlab.denx.de/Xenomai/ipipe/raw/vendors/raspberry/ipipe-4.1/drivers/pinctrl/bcm/pinctrl-bcm2835.c
#        

# 2.  apply kernel patches ( xenomai+ipipe, bcm( arch/arm/mach-bcm2709/.. and linux/drivers/pinctrl/bcm/pinctrl-bcm2835.c   )
# ------------------------
#
# 2a. apply xenomai (and ipipe) patch to kernel
# 
# first check if the ipipe patch applies well: (because little bit different kernel)
cd linux
patch  --dry-run  -p1  <  ../ipipe-core-4.1.18-arm-9.patch
# The argument --dry-run of the above execution allowed to verify if the patch is applied correctly without making changes.
# http://superuser.com/questions/755355/hunk-1-message-after-apply-a-patch
#  If the file to be patched has changed slightly since the patch was created, but the specific section 
# remained the same, patch can detect that and apply the patch appropriately.
# A hunk  message  means the file was successfully patched, but the first section that was patched was X lines earlier/later
# than was originally specified.
#
#  ==============>  small trivial fix on patch applied  <================================================================ !!!
#        =>  ../ipipe-core-4.1.18-arm-9.fixed.patch
patch  --dry-run  -p1  <  ../ipipe-core-4.1.18-arm-9.fixed.patch
cd  ..
# finally really apply both xenomai and ipipe patch to kernel

IMPORTANT:
   edit xenomai-3-3.0.5/scripts/prepare-kernel.sh 
   and change the 'ln -sf' command into a 'cp' command
   => instead of soft linking the xenomai files in the linux src tree
      we now copy them!!  
   => this is needed for 'make deb-pkg' in the linux kernel source tree
      which otherwise makes packages with broken links!! (see linux headers below)


xenomai-3-3.0.5/scripts/prepare-kernel.sh  --linux=linux/  --arch=arm  --ipipe=ipipe-core-4.1.18-arm-9.fixed.patch
# `-> xenomai script which does patch               `-> kernel source where patch applied     `-> ipipe patch file for kernel source

# 2b. apply raspberry pi specific patch  to kernel  (patch of Mathieu Rondonneau specific for rpi2 bcm-2709 )
#
cd  linux/
# dry-run
patch  -p1  <  ../patch-xenomai-3-on-bcm-2709.patch  --dry-run
# if successfull  do real run
patch  -p1  <  ../patch-xenomai-3-on-bcm-2709.patch  
cd ..
 
# 2c. apply a patched version of pinctrl-bcm2835.c from the official ipipe patch from the specific branch vendors/raspberry/ipipe-4.1
#    for the  rpi1 which uses the same gpio-chip as the rpi2 to the source :
command cp   pinctrl-bcm2835.c  linux/drivers/pinctrl/bcm/pinctrl-bcm2835.c 
#   `-> to disable interactive mode and to force overwrite

 

 
# 3. configure linux kernel/module option
# ---------------------------------------


cd linux

# fix xenomai Kconfig for xenomai gpio   =>  in xenomai source!!   => report to xenomai!
vim drivers/xenomai/gpio/Kconfig

    config XENO_DRIVERS_GPIO_BCM2835
        depends on MACH_BCM2708             => for pi1 , pi2 (and p3) has  MACH_BCM2709
        
     || change into
     \/
 
   config XENO_DRIVERS_GPIO_BCM2835      
     depends on MACH_BCM2708 || MACH_BCM2709    => xenomai source then applies for both pi1 and p2/p3

# create default config for bcm2709
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig
# a default configuration for bcm2709 written to .config
# specialize config for xenomai
# install package needed for menuconfig :  apt-get  install libncurses5-dev
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig

    CPU Power Management  --->
      CPU Frequency scaling  --->
        [ ] CPU Frequency scaling
      CPU idle  --->
        [ ] CPU idle PM support
    Kernel Features  --->
        [ ] Contiguous Memory Allocator
        [ ] Allow for memory compaction
    Kernel Hacking  --->
        [ ] KGDB: kernel debugger
    Boot options  --->
        Kernel command line type --->
            [X] Extend bootloader kernel arguments


    Xenomai Cobalt --->
         Drivers  --->
                 Real-time GPIO drivers  --->
                    <M> GPIO controller                          => with " [*] GPIO controller  " instead it builds directly in kernel, then no need to load module anymore!
                    [*]   Support for BCM2835 GPIOs                 `-> however we stick to default and just build it as module and load it at boot in /etc/rc.local
                    [ ]   Enable GPIO core debugging features


    note: in above  [ ]  means disable,  [X]  means enable



cd ..
        
        
       
        
# 4. build kernel and modules in linux dir 
# ----------------------------------------
 
cd linux/ 
# build
time make -j $NUMCORES ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs
# -> real    6m45.452s

# install in ../dist/ dir 
time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=../dist modules_install

cd ..

# EXTRA: install linux headers with Makefiles to build kernel modules on the pi itself
#--------------------------------------------------------------------------------------
#        note: 
#          'make headers_install' installs only the headers, the Makefiles needed to build a kernel module are not there
#          however with 'make deb-pkg' next to binary kernel packages it builds also a  linux-headers package
#          which contains both headers and makefiles needed to build kernel modules. So we build this package 
#          and copy it to the pi, and install it as a debian package on the pi

cd linux/
export NUMCORES=4 
export KBUILD_DEBARCH=armhf 
make ARCH=arm -j $NUMCORES  CROSS_COMPILE=arm-linux-gnueabihf-  deb-pkg

# copy the file  'linux-headers-4.1.21-v7+_4.1.21-v7+-3_armhf.deb' to the pi 
# then on the pi run :

   dpkg -i linux-headers-4.1.21-v7+_4.1.21-v7+-3_armhf.deb

   # it seems that the scripts in the linux headers itself are not cross-compiled to arm, (intel instead)
   # so to use them to build kernel modules we first need to compile them as arm binaries, to
   # do this we can call 'make modules_prepare' which calls 'make scripts' . 
   cd /usr/src/linux-headers-4.1.21-v7+/
   # run following make command, which can give some errors, which should be ignored be giving it the -i option
   make -i modules_prepare   
   # building kernel modules should work fine now!  

cd ..



# 5. built Xenomai user space part  ( kernel part is built with kernel above)
$ ------------------------------

## you need to have installed autoconf and libtool :
# sudo apt-get install autoconf
# sudo apt-get install libtool


# configure details see : https://xenomai.org/installing-xenomai-3-x/#_configuring

cd xenomai-3-3.0.5
./scripts/bootstrap 
./configure CFLAGS="-march=armv7-a  -mfloat-abi=hard -mfpu=neon -ffast-math" --host=arm-linux-gnueabihf --enable-smp --with-core=cobalt –enable-debug=partial

#
# note : http://xenomai.org/installing-xenomai-3-x/
#          –enable-smp
#              Turns on SMP support for Xenomai libraries.
#
#              Caution
#                  SMP support must be enabled in Xenomai libraries when the client
#                  applications are running over a SMP-capable kernel.

mkdir ../dist/xenomai
export DESTDIR=`realpath ../dist/xenomai`  # realpath because must be absolute path
make  DESTDIR="$DESTDIR"  install



6. copy build stuff in dist/ to raspbian sdcard 
-----------------------------------------------

# 0. install raspbian on sd card;  os x instructions : 


      note: diskutil is os x program!!  => do on mac!!

        diskutil list
            identify the disk (not partition) of your SD card. e.g. disk4 (not disk4s1)
        diskutil unmountDisk /dev/<disk# from diskutil>
            e.g. diskutil unmountDisk /dev/disk4
        sudo dd bs=1m if=<your image file>.img of=/dev/<disk# from diskutil>
            e.g. sudo dd bs=1m if=2014-09-09-wheezy-raspbian.img of=/dev/disk4
            (This will take a few minutes)
            
           

# 1. mount sdcard
#  become root otherwise you cannot access sdcard

sudo su -  

export BUILDDIR=/var/tmp/rpi2
export SDCARD=/dev/sdb
export MOUNTPOINT=/media/sdcard

mkdir ${MOUNTPOINT}
mount ${SDCARD}2 ${MOUNTPOINT}
mount ${SDCARD}1 ${MOUNTPOINT}/boot


cd $BUILDDIR

# 2. copy Xenomai user space files to sd card
#  
cd dist/xenomai
chown -R root:root *
cp -a * ${MOUNTPOINT}/
cd ../..


# 3. copy kernel and modules 
#
# 3a. cp kernel and device tree files from linux/ dir  to /boot/ directory on image
cd linux/
cp arch/arm/boot/zImage ${MOUNTPOINT}/boot/
cp arch/arm/boot/dts/bcm27*.dtb ${MOUNTPOINT}/boot/
rm -rf ${MOUNTPOINT}/boot/overlays/*
cp arch/arm/boot/dts/overlays/*.dtb* ${MOUNTPOINT}/boot/overlays/

# 3b. cp modules from dist/lib/modules to sd card
cd ../
cp -r dist/lib/modules/* ${MOUNTPOINT}/lib/modules

# update config for new kernel and device tree
# at end of /boot/config.txt add :

    kernel=zImage
    # for pi2
    device_tree=bcm2709-rpi-2-b.dtb
    # for pi3
    #device_tree=bcm2710-rpi-3-b.dtb


# update: if you just rename the just installed file '/boot/zImage' to '/boot/kernel7'  then you don't need to edit
#         /boot/config.txt because the bootscript on the raspberry pi finds out it is running on pi2 or pi3 and the
#         automatically boots '/boot/kernel7' .    Note: on pi0 or pi1 it boots '/boot/kernel' instead!

umount ${MOUNTPOINT}/boot ${MOUNTPOINT}/




