
Notes of installation of xenomai3 on a virtualbox image
=======================================================

image is available at :  http://www.cs.ru.nl/lab/xenomai/virtualbox.html



disclaimer:
  below are notes, not full description of how I made the virtualbox image
  
  
 
 
  
install debian jessie  (minimal install, no desktop)
----------------------------------------------------

http://www.wikiwand.com/en/Debian
http://www.wikiwand.com/en/List_of_Debian_releases 
==> take stable debian version : https://en.wikipedia.org/wiki/Debian_version_history#Release_table

   debian 8  codename: jesse  release: april 2015
  note:  every 2 year debian has new mayor release, so debian 9 will appear around april 2017
 
downloaded :   
  debian-8.5.0-amd64-DVD-1.iso.torrent    
 => use this standard image for minimal install => just don't select desktop!!
   see: https://www.howtoforge.com/tutorial/debian-8-jessie-minimal-server/2/  

just install linux 64bit
  memory size : 768MB (default)
  disk size :  8GB  (default)   => note: dynamically size, so dvi file is initially smaller
  
  
  => just start virtualbox => asks for installation cd
  
  
       IMPORTANT:  choose advanced options => choose expert install
  
   
  
  => choose standards for regional and keyboard settings
  
  => hostname: xenomai3
     root password: r3@lt1m3
     
     username   : des
     password: r3@lt1me
     
     
     timezone : just pick default
     
     
     partioning method: 
       - guided - use entire disk  (no LVM) 
       - all files in one partition
       
       
      => add a network mirror for apt   
          => otherwise you can only after installation add files from dvd and you have no network repo setup
          => so choose network mirror surfnet.nl 
                choose  to allow  non-free software!
          => after install finished 
              - comment out dvd line in /etc/apt/sources.list
              - run: apt-get update
              Now you can update packages from network
              
    => Sofware selection:   => see https://wiki.debian.org/tasksel  
      
         -> deselect  "Desktop"
         -> deselect  "printer server" 
         => only select    
              "SSH server"
              "standard system utilities" 
              
               http://unix.stackexchange.com/questions/90523/what-packages-are-installed-by-default-in-debian-is-there-a-term-for-that-set
               
               
  
  problem with installing samba => so changed contents of      /etc/apt/sources.list        
    https://wiki.debian.org/SourcesList
      
      replace contents of /etc/apt/sources.list with
      
      deb http://httpredir.debian.org/debian jessie main contrib non-free
      deb-src http://httpredir.debian.org/debian jessie main contrib non-free

      deb http://httpredir.debian.org/debian jessie-updates main contrib non-free
      deb-src http://httpredir.debian.org/debian jessie-updates main contrib non-free

      deb http://security.debian.org/ jessie/updates main contrib non-free
      deb-src http://security.debian.org/ jessie/updates main contrib non-free
      
      
     https://virtualboxes.org/doc/installing-guest-additions-on-ubuntu/
      
       Installing Guest Additions on Ubuntu

       Follow these steps to install the Guest Additions on your Ubuntu virtual machine:

           Login as ubuntu;
           Click on Applications/System/Terminal (or on Applications/Terminal, if you are using the 6.06.1 Dapper Drake release);
           Update your APT database with sudo apt-get update, and typing your password, if requested;
           Install the latest security updates with sudo apt-get upgrade;
           Install required packages with sudo apt-get install build-essential module-assistant;
           Configure your system for building kernel modules by running sudo m-a prepare;
           Click on Install Guest Additionsâ€¦ from the Devices menu, then choose to browse the content of the CD when requested.
           Run sudo sh /media/cdrom/VBoxLinuxAdditions.run, and follow the instructions on screen.
                   
              
  => with  tasksel  installed   LXDE  to have more convenient interface
     src: https://help.ubuntu.com/community/Tasksel
        Tasksel is a Debian/Ubuntu tool that installs multiple related packages as a co-ordinated "task" onto your system. 
        
  =>  after reboot : mounting virtualbox additions cdrom worked
         /media/cdrom/VBoxLinuxAdditions.run
         


kernel source
--------------
         
http://ask.xmodulo.com/install-full-kernel-source-debian-ubuntu.html
  
  
  Install Full Kernel Source on Debian

  Before downloading kernel source, install dpkg-dev, which contains a suite of development tools needed to build
  Debian source packages. Among other things, dpkg-dev contains dpgk-source tool which can extract a Debian source
  package and automatically apply patches.
  
  $ sudo apt-get install dpkg-dev

  Next, run the following command to download full kernel source.
  $ apt-get source linux-image-$(uname -r)

  Along with the full kernel source (linux_X.X.XX.orig.tar.xz), any available kernel patches
  (linux_X.X.X+XXX.debian.tar.xz) and source control file (linux_XXXX.dsc) will also be downloaded and stored in the
  current directory. The .dsc file instructs how the patches are applied to the kernel sources.

  Upon the completion of download, the above command will automatically invoke dpkg-source tool, which will unpack the
  downloaded kernel source in the current directory, and apply downloaded patches according to .dsc file.

  The final full kernel source tree will be available in the current directory as "linux-X.X.XX".
           
                
   => not right kernel               
                
https://kernel-handbook.alioth.debian.org/ch-common-tasks.html

    apt-get install linux-source-4.1.20
    
    
    apt-get source linux-image-4.1.20
    => not there for current debian version 
                  
                

build linux kernel with xenomai3  from kernel.org source
----------------------------------------------------------
   
   
http://xenomai.org/installing-xenomai-3-x/#cobalt-core-x86   
   
 #download kernel source 4.1.18       => from http://kernel.org 
 #download xenomai-3.0.2 source and put as subdir in kernel source
 
     root@xenomai3:~# ls des_source/*
     des_source/linux:
     linux-4.1.18  linux-4.1.18.tar.gz

     des_source/xenomai:
     xenomai-3.0.2  xenomai-3.0.2.tar.bz2
 
 
 #rename kernel source dir into linux-4.1.18_xenomai-3.0.2
 cd linux-4.1.18_xenomai-3.0.2/ 
 xenomai-3.0.2/scripts/prepare-kernel.sh --arch=x86_64  --ipipe=xenomai-3.0.2/kernel/cobalt/arch/x86/patches/ipipe-core-4.1.18-x86-3.patch 

 make  xconfig/gconfig/menuconfig  

   => apt-get  install libncurses5-dev
   
   
 cp /boot/config-3.16.0-4-amd64 .config
 
 
 
   ===> hmmm.... below is 'make localmodconfig' described, maybe that is finally used
       to keep number of modules needing to be compile low
       
 
 apt-get install vim     => enhanced vim
 
 
 
 http://xenomai.org/2014/06/configuring-for-x86-based-dual-kernels/ 
 
 CONFIG_APM  => not there, probably not in debian kernel  (now 2016  description is from 2014)
 CONFIG_ACPI_PROCESSOR=m -> n 
 
 CONFIG_CPU_FREQ=m  -> n   
 CONFIG_CPU_IDLE=m -> n
 
 CONFIG_INTEL_IDLE=m -> n
 CONFIG_INPUT_PCSPKR=m -> n
 CONFIG_PCI_MSI=m -> n
 
 CONFIG_MIGRATION=m -> n     => because make menuconfig
 
 
 => edit .config file 
 => then:  
     make menuconfig => directly exit and save   => saves config also somewhere else which is used in build
 => then build
 
 make bzImage
 make modules
 
 
 
 
 
 
install kernel    
--------------
  
  make install          => install kernel   => should be added to grub
  make install_modules  => install module
 
 
 
 => need to resize  VDI image, then needed  with gparted live cd to resize partiions
 => error booting xenomai kernel:
      reinstalled kernel  with:  make install 
      rebuild grub:  update-grub    
      
      
 
 
 
 
 
check xenomai running 

   $ dmesg | grep -i xenomai
   I-pipe: head domain Xenomai registered.
   [Xenomai] Cobalt vX.Y.Z enabled
 
 
 
 
build xenomai user space

  $ mkdir $build_root && cd $build_root
  $ xenomai_root/configure --with-core=mercury --enable-smp --enable-pshared
                                       $ `-> shouldn't this be cobalt??
  $ make install
  
   
   
Testing the real-time system (both cores)

   First, run the latency test:

     $ /usr/xenomai/bin/latency 
 
   If the latency test succeeds, you should try next to run the xeno-test test in order to assess the worst-case
   latency of your system. Try:

      $ /usr/xenomai/bin/xeno-test --help
      
      




some notes about modules config
-------------------------------  
  
  https://kernelnewbies.org/Linux_2_6_32#head-11f54cdac41ad6150ef817fd68597554d9d05a5f

  
  
    Most people uses the kernel shipped by distros - and that's good. But some people like to compile their own kernels
    from kernel.org, or maybe they like following the Linux development and want to try it. Configuring your own kernel,
    however, has become a very difficult and tedious task - there're too many options, and some times userspace software
    will stop working if you don't enable some key option. You can use a standard distro .config file, but it takes too
    much time to compile all the options it enables.

    To make the process of configuration easier, a new build target has been added: make localmodconfig. It runs "lsmod"
    to find all the modules loaded on the current running system. It will read all the Makefiles to map which CONFIG
    enables a module. It will read the Kconfig files to find the dependencies and selects that may be needed to support a
    CONFIG. Finally, it reads the .config file and removes any module "=m" that is not needed to enable the currently
    loaded modules. With this tool, you can strip a distro .config of all the unuseful drivers that are not needed in our
    machine, and it will take much less time to build the kernel. There's an additional "make localyesconfig" target, in
    case you don't want to use modules and/or initrds.
      
  
  
  http://superuser.com/questions/146544/how-to-configure-a-linux-kernel-based-on-the-modules-currently-in-use
  
  How to configure a Linux kernel based on the modules currently in use?    

    If you're using Linux 2.6.32 and above, you may want to check out the "localmodconfig" make target. It does pretty
    much what you askâ€”it determines what modules you have running, and generates a .config making sure those modules
    are built. The "localyesconfig" target will compile those modules statically into the kernel rather than creating
    modules.

    More info available here: Easy local kernel configuration.
    
    
    => https://wiki.archlinux.org/index.php?title=Modprobed-db&redirect=no
    
    
http://unix.stackexchange.com/questions/253245/what-does-make-localmodconfig-do/253248

    From the kernel README:

        "make localmodconfig" 
        
           Create a config based on current config and loaded modules (lsmod). Disables any module option that is not
           needed for the loadedmodules.

        To create a localmodconfig for another machine, store the lsmod of that machine into a file and pass it in as a
        LSMOD parameter.

                       target$ lsmod > /tmp/mylsmod
                       target$ scp /tmp/mylsmod host:/tmp

                       host$ make LSMOD=/tmp/mylsmod localmodconfig

        The above also works when cross compiling.

         "make localyesconfig" Similar to localmodconfig, except it will convert
                               all module options to built in (=y) options.


    
https://www.linuxtopia.org/online_books/linux_kernel/kernel_configuration/ch07s03.html

    Once you have a working configuration, the only thing that is necessary is to update it with any new options that
    have been added to the kernel since the last release. To do this, the make oldconfig and make silentoldconfig
    options should be used.
    

    make oldconfig 
      takes the current kernel configuration in the .config file, and updates it based on the new kernel release. 
    
    To do this, it prints out all configuration questions, and provides an answer for them if the option is
    already handled in the configuration file. If there is a new option, the program stops and asks the user what the
    new configuration value should be set to. After answering the prompt, the program continues on until the whole
    kernel configuration is finished.

   make silentoldconfig works exactly the same way as oldconfig does, but it does not print anything to the screen,
   unless it needs to ask a question about a new configuration option.
   
   Usually, when upgrading between different versions of the stable releases, no new configuration options are added,
   as this is supposed to be a stable kernel series. If this happens, there are no new questions that need to be
   answered for the kernel configuration, so the program continues successfully without any need for user intervention
   
   => https://rtt-lwr.readthedocs.io/en/latest/rtpc/xenomai3.html
        Take the actual working config :

        yes "" | make oldconfig

        


make help


     Configuration targets:
       config	  - Update current config utilising a line-oriented program
       nconfig         - Update current config utilising a ncurses menu based
                         program
       menuconfig	  - Update current config utilising a menu based program
       xconfig	  - Update current config utilising a Qt based front-end
       gconfig	  - Update current config utilising a GTK+ based front-end
       oldconfig	  - Update current config utilising a provided .config as base
       localmodconfig  - Update current config disabling modules not loaded
       localyesconfig  - Update current config converting local mods to core
       silentoldconfig - Same as oldconfig, but quietly, additionally update deps
       defconfig	  - New config with default from ARCH supplied defconfig
       savedefconfig   - Save current config as ./defconfig (minimal config)
       allnoconfig	  - New config where all options are answered with no
       allyesconfig	  - New config where all options are accepted with yes
       allmodconfig	  - New config selecting modules when possible
       alldefconfig    - New config with all symbols set to default
       randconfig	  - New config with random answer to all options
       listnewconfig   - List new options
       olddefconfig	  - Same as silentoldconfig but sets new symbols to their
                         default value
       kvmconfig	  - Enable additional options for kvm guest kernel support
       xenconfig       - Enable additional options for xen dom0 and guest kernel support
       tinyconfig	  - Configure the tiniest possible kernel
       
       
       
       

root@xenomai308:~/linux-4.9.144# yes "" | make oldconfig
scripts/kconfig/conf  --oldconfig Kconfig
#
# using defaults found in /boot/config-4.9.0-8-amd64
#
#
*
* Restart config...
*
*
* General setup
*
  => asks questions and 'yes ""' answers them all with enter (default)

note: 'make silentoldconfig' does need an .config already there otherwise it gives an error 
    => doesn't take  a config from /boot as start point
    
    
    root@xenomai308:~/linux-4.9.144# make silentoldconfig
    scripts/kconfig/conf  --silentoldconfig Kconfig
    ***
    *** Configuration file ".config" not found!
    ***
    *** Please run some configurator (e.g. "make oldconfig" or
    *** "make menuconfig" or "make xconfig").
    ***
    scripts/kconfig/Makefile:37: recipe for target 'silentoldconfig' failed
    make[1]: *** [silentoldconfig] Error 1
    Makefile:580: recipe for target 'silentoldconfig' failed
    make: *** [silentoldconfig] Error 2
    
 fix: 
   manually do:
       $ cp /boot/config-4.9.0-8-amd64 .config
       $make silentoldconfig   
    
       yes "" |make silentoldconfig
       scripts/kconfig/conf  --silentoldconfig Kconfig
       *
       * Restart config...
       *
       *
       * General setup    
       
       ...
       
       Console input/output is redirected. Run 'make oldconfig' to update configuration.

       scripts/kconfig/Makefile:37: recipe for target 'silentoldconfig' failed
       make[1]: *** [silentoldconfig] Error 1
       Makefile:580: recipe for target 'silentoldconfig' failed
       make: *** [silentoldconfig] Error 2    
 
    => also doesn't work =>  silentoldconfig sucks!!
    ===> stick with :   
              
              yes "" | make oldconfig   
         
         which works fine
        
        update:  'make olddefconfig' does the same
        
          olddefconfig	  - Same as silentoldconfig but sets new symbols to their
                            default value
                            
                           
         
         
    note: ' make localmodconfig' also doesn't support stdin input from 'yes ""'
          => fix: first run 'make olddefconfig' and then run 'make localmodconfig' 
               
                 make olddefconfig         # Update current config utilising a provided .config as base (if no .config found, looks in /boot for config)
                                           # and sets new symbols to their default value
                 make localmodconfig       # to keep number of modules to compile and include small  => small image!!
                         `-> note: still can give some questions for some NEW options
                                   then just press ENTER (choose default)