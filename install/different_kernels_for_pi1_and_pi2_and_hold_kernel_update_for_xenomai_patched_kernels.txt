
https://www.reddit.com/r/raspberry_pi/comments/3u39ev/how_to_prevent_kernel_update/  

which packages used by kernel?
search installed packages which have /boot :
  $ dpkg -S /boot
  raspberrypi-kernel, raspberrypi-bootloader,  base-files : /boot

  $ dpkg -S /boot
  ..
  raspberrypi-kernel: /boot/kernel.img
  raspberrypi-kernel: /boot/kernel7.img
  ..
  
  
then hold to that package version :

  $ apt-mark hold  raspberrypi-kernel raspberrypi-bootloader
  
  $ dpkg --get-selections | grep raspberrypi 
  ..
  raspberrypi-kernel            hold 
  raspberrypi-bootloader        hold
  ..
  

https://pi-ltsp.net/advanced/kernels.html

Raspberry Pi kernels

    The kernel for the Raspberry Pi can be found on the /boot partition (the FAT32 partition you can open on Windows, Mac and Linux).
    
    - For the Raspberry Pi 1 (B, B+, A, A+) it is called        kernel.img.
    - For the Raspberry Pi 2 (B) it is called                   kernel7.img.

    The kernel is one of the few bits of software that wasn't able to run on both the Raspberry Pi 1 CPU (ARM6) and the
    Raspberry Pi 2 (ARM7) with the same version.
    
    Instead the 2 versions had to be compiled separately and the firmware selects the correct one depending on the
    hardware it detects on boot.






=> question : can I still have the same modules dir in /lib/modules ??
      => think so, think ipipe and bcm patches don't affect module code
      
      
      
    if so, we can user kernel and kernel7 trick
    however we still need also different xenomai user space utils because rpi1 is single core and rpi2/3 is multicore
      => but that is xenomai specific and rpi couldn't forsee that, but we can set in ~/.bashrc the right
         kernel path depending on value in /proc/device-tree/model  .... hmm /proc/cpu is maybe easier
          to grep on bcm type
          
   https://www.raspberrypi.org/documentation/configuration/device-tree.md
   
   
    On a Raspberry Pi it is the job of the loader (one of the start.elf images) to combine overlays with an appropriate
    base device tree, and then to pass a fully resolved Device Tree to the kernel. The base Device Trees are located
    alongside start.elf in the FAT partition (/boot from Linux), named bcm2708-rpi-b.dtb, bcm2708-rpi-b-plus.dtb,
    bcm2708-rpi-cm.dtb, and bcm2709-rpi-2-b.dtb. Note that Models A and A+ will use the "b" and "b-plus" variants,
    respectively. This selection is automatic, and allows the same SD card image to be used in a variety of devices.

    Note that DT and ATAGs are mutually exclusive. As a result, passing a DT blob to a kernel that doesn't understand
    it causes a boot failure. To guard against this, the loader checks kernel images for DT-compatibility, which is
    marked by a trailer added by the mkknlimg utility; this can be found in the scripts directory of a recent kernel
    source tree. Any kernel without a trailer is assumed to be non-DT-capable.

    A kernel built from the rpi-4.4.y tree (and later) will not function without a DTB, so from the 4.4 releases
    onwards, any kernel without a trailer is assumed to be DT-capable.


https://www.raspberrypi.org/documentation/configuration/device-tree.md

If the kernel fails to come up in DT mode, this is probably because the kernel image does not have a valid trailer. Use
knlinfo to check for one, and the mkknlimg utility to add one. Both utilities are included in the scripts directory of
current Raspberry Pi kernel source trees.

   <linux-kernel-srcdir>/scripts/knlinfo  <image>
   
   
  eg.  
   harcok@cup:/var/tmp/rpi3bplus/linux
   $  ./scripts/knlinfo  arch/arm/boot/zImage
   * no trailer
   
   
https://www.raspberrypi.org/documentation/configuration/device-tree.md


here are several ways to tell that the kernel is using Device Tree:

    The "Machine model:" kernel message during bootup has a board-specific value such as "Raspberry Pi 2 Model B", rather than "BCM2709".
      `-> /proc/device-tree/model
          /proc/device-tree/compatible
          
    Some time later, there may also be another kernel message saying "No ATAGs?" - this is expected.
    
    /proc/device-tree exists, and contains subdirectories and files that exactly mirror the nodes and properties of the DT.

With a Device Tree, the kernel will automatically search for and load modules that support the indicated enabled devices. As a result, by creating an appropriate DT overlay for a device you save users of the device from having to edit /etc/modules; all of the configuration goes in config.txt, and in the case of a HAT, even that step is unnecessary. Note, however, that layered modules such as i2c-dev still need to be loaded explicitly.

The flipside is that because platform devices don't get created unless requested by the DTB, it should no longer be
necessary to blacklist modules that used to be loaded as a result of platform devices defined in the board support
code. In fact, current Raspbian images ship without a blacklist file.





3.1: Overlays and config.txt

A kernel built from the rpi-4.4.y tree (and later) will not function without a DTB, so from the 4.4 releases onwards,
any kernel without a trailer is assumed to be DT-capable. 

  -> see above my kernel didn't had a trailer  -> so assumed to be DT-capable
    => /proc/device-tree/model  gives back board-specific value such as "Raspberry Pi 2 Model B", rather than "BCM2709". -> so from paragraph above we see device tree (DT) is used!!

You can override this by adding a trailer without the DTOK
flag or by putting device_tree= in config.txt, but don't be surprised if it doesn't work.

4.3: Forcing a specific Device Tree

If you have very specific needs that aren't supported by the default DTBs (in particular, people experimenting with the
pure-DT approach used by the ARCH_BCM2835 project), or if you just want to experiment with writing your own DTs, you
can tell the loader to load an alternate DTB file like this:

    device_tree=my-pi.dtb

4.4: Disabling Device Tree usage

Since the switch to the 4.4 kernel and the use of more upstream drivers, Device Tree usage is required in Pi kernels.
The method of disabling DT usage is to add:

   device_tree=

to config.txt. However, if the kernel has a mkknlimg trailer indicating DT capability then this directive will be ignored.


