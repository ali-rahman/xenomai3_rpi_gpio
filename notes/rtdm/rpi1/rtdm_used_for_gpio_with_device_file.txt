
https://github.com/pficheux/raspberry_pi/tree/master/Xenomai  2.6/2,4   

the following examples on this repository

    xenomai_rpi_gpio	GPIO control with Xenomai (user-space only)  
    kernel_hello		"Hello World" RTDM module
    kernel_hb		RTDM heartbeat with LED (adapted for RPi)
    RT			RTDM driver example for RPi GPIO (RT domain)
    RT_NRT			RTDM driver example for RPi GPIO (RT + NRT domain)
    RT_irq			Same with RDTM irq handling


 RT_irq	=> good example of writing an RTDM driver

other old example: http://www.acadis.org/pages/captain.at/driver-example



memory map goes through /dev/mem which is not realtime
------------------------------------------------------

https://xenomai.org/pipermail/xenomai/2016-November/036863.html

The process for opening a special device file through Cobalt is as follows:

1. the open() wrapper in lib/cobalt/rtdm.c is called by the application,
as a result of wrapping the overloaded POSIX symbols (ld's --wrap
option, see output of xeno-config --ldflags --posix).

2. the open() wrapper first invokes the Cobalt core with the file path
("/dev/mem" in this case), for determining whether the associated device
is managed by RTDM. If so, RTDM returns a valid file descriptor to the
caller. This should not match your use case.

3. otherwise, lib/cobalt hands the request over the glibc by calling the
real open(). This should happen in the /dev/mem case.

When mapping, the same process happens for the mmap() routine. If the
file descriptor passed to mmap() belongs to RTDM, Cobalt's mmap handler
in kernel/cobalt/posix/io.c receives the request. Otherwise, the mmap()
wrapper from lib/cobalt/rtdm.c hands the request over the regular glibc
call.

In your case, I would expect step 2 to fail for RTDM since it does not
manage /dev/mem, and the subsequent mmap() to be fully handled by the
regular kernel via a glibc call. You may want to track down the issue
starting from mmap_pgoff() in mm/mmap.c, down to the mmap_mem() in
drivers/char/mem.c.

-- 
Philippe.




rtdm example  for gpio for rpi
==============================

=> gpio.h used  


 https://github.com/pficheux/raspberry_pi/blob/master/Xenomai/RT_irq/user/xenomai_rpi_rtdm_gpio.c
   => pficheux
 
    user space program:  
 
         /* IRQ thread */
         void *thread_irq (void *dummy)
         {
           // Send ioctl command 2 to driver                => means wait in kernel space for interrupt!!
           while (1) {
             if (rt_dev_ioctl (fd, 2, 0) < 0)                     => ioctl in xenomai3 which is realtime posix variant
               fprintf (stderr, "rt_dev_ioctl error!\n");
             else {
               clic++;
               rt_printf ("*** got IRQ from driver!\n");
             }
           }
         }
 
        rt_dev_ioctl
        
        
        => uses device file to communicate with device driver in user space
  

   about rt_dev_ioctl: 

      http://www.cs.ru.nl/lab/xenomai/api/group__userapi.html
         old rtdm api for xenomai2
     
          =>  rt_dev_ioctl
 
 
      http://www.xenomai.org/documentation/xenomai-3/html/xeno3prm/group__rtdm__irq.html
       new rtdm api  
    
        => NO  rt_dev_ioctl 
    
      root@xenomai3:~/des/xenomai# grep -r  rt_dev_ioctl *
      root@xenomai3:~/des/xenomai# vim xenomai-3.0.2/include/trank/rtdm/rtdm.h
 
         => bridge old an new rtdm api
     
    ==> so probably can port this  
     


  
     
kernel module:

  static struct rtdm_device device = {
   struct_version:         RTDM_DEVICE_STRUCT_VER,
 
   device_flags:           RTDM_NAMED_DEVICE,
   context_size:           sizeof(struct rpi_gpio_context),
   device_name:            DEVICE_NAME,

   open_rt:                NULL,
   open_nrt:               rpi_gpio_open,

   ops:{
    close_rt:       NULL,
    close_nrt:      rpi_gpio_close,
  
    ioctl_rt:       rpi_gpio_ioctl_rt,
    ioctl_nrt:      NULL,
  
    read_rt:        NULL,
    read_nrt:       NULL,

    write_rt:       NULL,
    write_nrt:      NULL,   
    },

   device_class:           RTDM_CLASS_EXPERIMENTAL,
   device_sub_class:       RTDM_SUBCLASS_RPI_GPIO,
   driver_name:            "rpi_gpio_rtdm",
   driver_version:         RTDM_DRIVER_VER(0, 0, 0),
   peripheral_name:        "RPI_GPIO RTDM",
   provider_name:          "PF",
   proc_name:              device.device_name,
  };

  
 => use linux gpiolib methods to set up gpio pins,
   but uses  rtdm_ method to set up handler for IRQ for that input pin
   => handler signals event
     on which in   ioctl method is waited  =>  called from realtime user space
     
     

