 see also ../xenomai_program_apis__and_xenoconfig.txt

explanation how standard posix program can be linked against libcobalt with _wrap_<posix> methods
================================================================================================


   From xenomai3_presentation_jan_kiszka.pdf page 13 :
      
        Dispatching problem
        • Both libCobalt and libc provide POSIX implementations
        • How do RT application pick the right one?
        
            => RT application should call into libcobalt   (contains: __wrap_pthread_mutex_lock)
              none-RT application should call into libc    (contains: pthread_mutex_lock)  
        
        Solution: symbol wrapping  ( wrapping active when using --posix flag, wrapping not active when using --cobalt flag )
        • Example pthread_mutex_lock → __wrap_pthread_mutex_lock
        • libcobalt provides __wrap_*, forwards unhandled invocations to libc • No source code changes to POSIX applications required
        • Some additional services available (*_np)
        
 
 
 
 short:
    give linker for each posix method a wrap argument 
    eg. 
         --wrap=pthread_mutex_lock

     => this causes the linker to link the symbol "pthread_mutex_lock" in the c source against
        a function   __wrap_pthread_mutex_lock in the libraries!!
 
 long: 
 
    - both xenomai with cobalt kernel and libc implement posix library
    - when linking both libc and libcobalt are in link path. To distinguish posix api methods in libcobalt
      from the posix api methods in libc the posix api methods in libcobalt all get a __WRAP_ prefix.
    - To link a program with posix api calls against cobalt kernel instead of libc xenomai
      we use a linker trick :
        using the --wrap  flag of the linker instructs the linker to link posix method X in the c source 
        against __WRAP_X in the libraries instead of the method __X    
    - when using xenoconfig with --posix flag then the linker uses above wrapper trick to link the POSIX api
      against libcobalt  ( wrapped linking )
    - when using   xenoconfig with --cobalt flag the the linker doesn't uses this wrapper trick, and our source
      code must explicitly contain  __WRAP_X  for each posix X method. (none-wrapped linking to libcobalt)
    - all other none-POSIX api's such as alchemy,vxworks or psos  are implemented with the help of the copperplate
      interface on top of libcobalt's posix library. These are unique API's which don't need wrapping. 
    - The none-POSIX api's are none-posix and therefore can be combined with the libcobalt posix api. 
      Thus we can have just --posix, but we can also have  --posix --alchemy  combined!!
       => see  http://xenomai.org/start-here/


    
        
        

1. compiling doesn't  do the trick
-----------------------------------



# xeno-config --cflags --skin=posix
-I/usr/xenomai/include/cobalt -I/usr/xenomai/include -march=armv7-a -mfloat-abi=hard -mfpu=neon -ffast-math -D_GNU_SOURCE -D_REENTRANT -D__COBALT__ -D__COBALT_WRAP__
# xeno-config --cflags --skin=cobalt
-I/usr/xenomai/include/cobalt -I/usr/xenomai/include -march=armv7-a -mfloat-abi=hard -mfpu=neon -ffast-math -D_GNU_SOURCE -D_REENTRANT -D__COBALT__

 => difference : -D__COBALT_WRAP__  
 
 
   root@raspberrypi:/usr/xenomai # grep -r __COBALT_WRAP__ *
   include/boilerplate/libc.h:#if defined(__COBALT_WRAP__) || defined(__IN_XENO__)
   include/boilerplate/libc.h:#endif /* __COBALT_WRAP__ || __IN_XENO__ */
      `-> only defines clock_nanosleep() and pthread_setname_np() extra, because libc does not define them 
      
            #if defined(__COBALT_WRAP__) || defined(__IN_XENO__)
            /*
             * clock_nanosleep() and pthread_setname_np() must be declared when the libc
             * does not declare them, both for compiling xenomai, and for compiling
             * applications wrapping these symbols to the libcobalt versions.
             */
            #ifndef HAVE_CLOCK_NANOSLEEP
            int clock_nanosleep(clockid_t clock_id, int flags,
                        const struct timespec *request,
                        struct timespec *remain);
            #endif /* !HAVE_CLOCK_NANOSLEEP */

            #ifndef HAVE_PTHREAD_SETNAME_NP
            int pthread_setname_np(pthread_t thread, const char *name);
            #endif /* !HAVE_PTHREAD_SETNAME_NP */
            #endif /* __COBALT_WRAP__ || __IN_XENO__ */
  
  
2. linking does the trick by using the --wrap symbol option for each  posix symbol
----------------------------------------------------------------------------------

# xeno-config --ldflags --skin=posix
-Wl,--no-as-needed -Wl,@/usr/xenomai/lib/cobalt.wrappers -Wl,@/usr/xenomai/lib/modechk.wrappers  /usr/xenomai/lib/xenomai/bootstrap.o -Wl,--wrap=main -Wl,--dynamic-list=/usr/xenomai/lib/dynlist.ld -L/usr/xenomai/lib -lcobalt -lmodechk -lpthread -lrt
# xeno-config --ldflags --skin=cobalt
-Wl,--no-as-needed                                       -Wl,@/usr/xenomai/lib/modechk.wrappers  /usr/xenomai/lib/xenomai/bootstrap.o -Wl,--wrap=main -Wl,--dynamic-list=/usr/xenomai/lib/dynlist.ld -L/usr/xenomai/lib -lcobalt -lmodechk -lpthread -lrt


=> difference : -Wl,@/usr/xenomai/lib/cobalt.wrappers


 man ld
 
      Note: if the linker is being invoked indirectly, via a compiler driver (e.g. gcc) then all the
            linker command line options should be prefixed by -Wl,
 
 
       @file
             Read command-line options from file.
             
      --wrap=symbol
           Use a wrapper function for symbol.  Any undefined reference to symbol will be resolved to "__wrap_symbol".  
                                               ---------------------------------
                                                 `-> symbol which linker must resolve 
                                                   => normally search for symbol which will be  resolved by libc, but now 
                                                      searches in stead for   "__wrap_symbol" which will be resolved by libcobalt
                                                      note: "__real_symbol"  will be resolved to libc!!
                                                      
                                                      note: libc will by default always be linked against, so you need this wrapping!!
                                                          see: https://stackoverflow.com/questions/6969225/libraries-that-are-linked-by-default
                                                      
           Any undefined reference to "__real_symbol" will be resolved to symbol.

           This can be used to provide a wrapper for a system function.  The wrapper function should be called "__wrap_symbol".  If it wishes to call the system function, it should call "__real_symbol".

           Here is a trivial example:

                   void *
                   __wrap_malloc (size_t c)
                   {
                     printf ("malloc called with %zu\n", c);
                     return __real_malloc (c);
                   }

           If you link other code with this file using --wrap malloc, then all calls to "malloc" will call the function "__wrap_malloc" instead.  The call to "__real_malloc" in "__wrap_malloc" will call the real "malloc" function.

           You may wish to provide a "__real_malloc" function as well, so that links without the --wrap option will succeed.  If you do this, you should not put the definition of "__real_malloc" in the same file as "__wrap_malloc"; if you do, the assembler may
           resolve the call before the linker has a chance to wrap it to "malloc".             

  
  thus above :
  
     --wrap=main     => means that main is wrapped!!
     
     @/usr/xenomai/lib/cobalt.wrappers  => extra commandline options :
     
       $ head /usr/xenomai/lib/cobalt.wrappers
        --wrap pthread_attr_init
        --wrap pthread_create
        --wrap pthread_setschedparam
        --wrap pthread_getschedparam
        --wrap pthread_yield
        --wrap sched_yield
        --wrap sched_get_priority_min
        --wrap sched_get_priority_max
        --wrap sched_setscheduler
        --wrap sched_getscheduler
        ...
        
      => Any undefined reference to symbol will be resolved to "__wrap_symbol".
      
         so we don't specify libc to the linker , but libcobalt
         then the linker cannot find eg.  pthread_create then instead it resolves it to __wrap_pthread_create 
        