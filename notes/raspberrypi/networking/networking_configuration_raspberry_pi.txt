 http://raspberrypi.stackexchange.com/questions/39785/dhcpcd-vs-etc-network-interfaces


  with the change from Wheezy to Jessie (and in a broader sense with the adoption of systemd) 
  the configuration of `dhcpcd.conf' and 'wpa_supplicant.conf' will be the norm and the 'interfaces' file will be left to it's own devices.

  => use 
       dhcpcd.conf (eth) and
       wpa_supplicant.conf (wlan)


ifupdown tool
------------

 config file : /etc/network/interfaces

 doc: http://wiki.xen.org/old-wiki/xenwiki/HostConfiguration/Networking.html

        Under Debian (and its derivative distributions) the basic network configuration is managed by the ifupdown tool and
        configured via the /etc/network/interfaces configuration file which is described in the interfaces(5) man page. The
        Linux bridge configuration tools are supplied in the bridge-utils package which integrates support into
        /etc/network/interfaces as described in the bridge-utils-interfaces(5) man page.

 update:
 
    
  http://raspberrypi.stackexchange.com/questions/39785/dhcpcd-vs-etc-network-interfaces


  with the change from Wheezy to Jessie (and in a broader sense with the adoption of systemd) 
  the configuration of `dhcpcd.conf' and 'wpa_supplicant.conf' will be the norm and the 'interfaces' file will be left to it's own devices.
 



  man interfaces ( /etc/network/interfaces ) 
         read :  http://manpages.ubuntu.com/manpages/trusty/man5/interfaces.5.html


       Lines  beginning with the word "auto" are used to identify the physical
       interfaces to be brought up when ifup is run with the -a option.  (This
       option  is  used by the system boot scripts.)  Physical interface names
       should follow the word "auto" on the same line.  There can be  multiple
       "auto"  stanzas.   ifup  brings  the  named  interfaces up in the order
       listed.
       
          

       Lines beginning with "allow-" are  used  to  identify  interfaces  that
       should  be  brought  up automatically by various subsytems. This may be
       done using a command such as "ifup --allow=hotplug  eth0  eth1",  which
       will  only  bring up eth0 or eth1 if it is listed in an "allow-hotplug"
       line. Note that "allow-auto" and "auto" are synonyms.

        => hotplug: bring up automatically  by subsystems

        IMPORTANT:  when replugging into different network socket
                    first wait until connection really down before 
                    plugin it into another socket, otherwise it 
                    won't do anything! 
                     => hotplug will only activate if there is not a connection
                        and thus if the connections is still alive when replugging  to fast
                        it doesn't do anything!
                        
      
      Notes: 
         - auto:  causes the network to be setup when booting
         
         - hotplug: causes the network to be setup when a live utp cable is plugged in 
                    and currently no network is configured
                    

      


dhcpcd
------


     homepage : 
        http://roy.marples.name/projects/dhcpcd/index

     configfile : /etc/dhcpcd.conf
        
         dhcpcd
            a DHCP and DHCPv6 client. It's also an IPv4LL (aka ZeroConf) client.    
            
            
            In layman's terms, dhcpcd runs on your machine and silently configures your computer to work on the
            attached networks without trouble and mostly without configuration.
       
     raspberry pi: 
     
       => favors dhcpcd above ifupdown tool because fallback profile:
     
     
        https://wiki.archlinux.org/index.php/dhcpcd
         
           It is possible to configure a static profile within dhcpcd and fall back to it when DHCP lease fails. This is
           useful particularly for headless machines such as Raspberry Pi, where the static profile can be used as
           "recovery" profile to ensure that it is always possible to connect to the machine.
    
        http://raspberrypi.stackexchange.com/questions/39785/dhcpcd-vs-etc-network-interfaces


        With the change from Wheezy to Jessie (and in a broader sense with the adoption of systemd) the
        configuration of `dhcpcd.conf' and 'wpa_supplicant.conf' will be the norm and the 'interfaces' file will be left to
        it's own devices.
        

        This means : 
            For eth0 make changes to '/etc/dhcpcd.conf'.  (also static eth0 config can be placed here)
              eg.
                dhcpcd.conf: 
                 # Custom static IP address for eth0.
                 interface eth0
                 static ip_address=192.168.0.115/24
                 static routers=192.168.0.1
                 static domain_name_servers=192.168.0.1
             details see: https://wiki.archlinux.org/index.php/dhcpcd
        
        
            However, if making changes to a wireless connection (wlan0) you will also need to
             make changes to /etc/wpa_supplicant/wpa_supplicant.conf which is where you add the network ssid and password.
 

            
    good documentation:
    

          http://linuxcommand.org/man_pages/dhcpcd8.html
  
           dhcpcd  is  an implementation of the DHCP client specified
                  in RFC2131 (when -r option is not specified)  and  RFC1541
                  (when -r option is specified).

                  It  gets the host information (IP address, netmask, broadÂ­
                  cast address, etc.) from a DHCP server and configures  the
                  network  interface  of the machine on which it is running.
                  It also tries to renew the lease time according to RFC2131
                  or RFC1541 (obsolete).
    
          https://wiki.gentoo.org/wiki/Dhcpcd
    
            Dynamic Host Configuration Protocol Client Daemon (dhcpcd) is a popular DHCP client for Gentoo Linux. It is
            capable of handling both IPv4 and IPv6 configurations
      
            All dhcpcd configuration can be set in the /etc/dhcpcd.conf file, but for most installations dhcpcd will work
            out of the box presuming most computers nowadays are behind a router or access point running a DHCP server.
            Though man 5 dhcpcd.conf[1] will be helpful in case advanced configuration is required.
      
    
    
          https://wiki.archlinux.org/index.php/dhcpcd
         
            dhcpcd is a DHCP and DHCPv6 client. It is currently the most feature-rich open source DHCP client, see the home
            page for the full list of features.
      
            Note: dhcpcd (DHCP client daemon) is not the same as dhcpd (DHCP (server) daemon).

         
         
         
Fallback profile  with dhcpcd
------------------------------
    
             => set this to 
                    169.254.0.2
    
          -  https://wiki.archlinux.org/index.php/dhcpcd

                It is possible to configure a static profile within dhcpcd and fall back to it when DHCP lease fails. This is
                useful particularly for headless machines such as Raspberry Pi, where the static profile can be used as
                "recovery" profile to ensure that it is always possible to connect to the machine.

                   => specially for raspberry pi, they use dhcpcd 
 
                The following example configures a static_eth0 profile with 192.168.1.23 as IP address, 192.168.1.1 as gateway
                and name server, and makes this profile fallback for interface eth0.

                    /etc/dhcpcd.conf

                    # define static profile
                    profile static_eth0
                    static ip_address=192.168.1.23/24
                    static routers=192.168.1.1
                    static domain_name_servers=192.168.1.1

                    # fallback to static profile on eth0
                    interface eth0
                    fallback static_eth0
        


            -   http://manpages.ubuntu.com/manpages/trusty/man5/dhcpcd.conf.5.html
   
              fallback profile
                           Fallback to using this profile if DHCP fails.  This allows you to
                           configure a static profile instead of using ZeroConf. 
  
     



set ip staticly to link local address with "ip" kernel boot parameter  :   fix rpi to  ip=169.254.0.2    => special link local addres
---------------------------------------------------------------------

    src: 
          https://www.kernel.org/doc/Documentation/kernel-parameters.txt
           => says  "ip=x.x.x."  is an allowed kernel boot parameter
          
    
          https://pihw.wordpress.com/guides/direct-network-connection/in-a-nut-shell-direct-network-connection/
          see also: http://elinux.org/RPi_cmdline.txt
  
          quick fix:
  
           sudo nano /boot/cmdline.txt  
           => add at end first line " ip=169.254.0.2"
           DONE
   
      
     



TIP: decrease dhcp timeout  for dhcpcd  => to quicker boot when connect to laptop -> dhcp fail time faster!!! => boot faster
--------------------------------------

http://www.linuxquestions.org/questions/linux-networking-3/dhcpdiscover-454204/
  
  To edit the timeout you can use the directive 'timeout' in '/etc/dhclient.conf' file. The default timeout is 60 seconds.
  Hope you got the answer....
  
  => rpi: /etc/dhcp/dhclient.conf   => set to 10 seconds instead of 60






static network config:
-----------------------

* via dphcd  :

   
     http://raspberrypi.stackexchange.com/questions/37920/how-do-i-set-up-networking-wifi-static-ip
         an example which configures a static address, routes and dns.
         in /etc/dphcd.conf
  
              interface eth0

              static ip_address=192.168.0.10/24
              static routers=192.168.0.1
              static domain_name_servers=192.168.0.1
 
* via   ifupdown tool

        http://www.suntimebox.com/raspberry-pi-tutorial-course/week-3/day-5/
           static network config:
     
     
             Next you need to edit the interfaces file to set this static information.  Enter the following command.

                 sudo nano /etc/network/interfaces

             Remove the line that reads

                 iface eth0 inet dhcp

             Add the following

                 iface eth0 inet static
                     address 192.168.0.2
                     netmask 255.255.255.0
                     network 192.168.0.0
                     broadcast 192.168.0.255
                     gateway 192.168.0.1

            another description of above:
               http://elinux.org/RPi_Setting_up_a_static_IP_in_Debian
                       
