wiringpi
========


* c library to program gpio
* but also comes with "gpio" commandline utility 


install on rpi
--------------

apt-get update
apt-get install wiringpi       => also has gpio utility




===========================================================
wiringpi c library to setup  pull-up or pull-down resistor
===========================================================


IMPORTANT:  use wiringpi c library because gpiolib doesn't support setting internal pull-up/down resistor in GPIO pin
 

https://projects.drogon.net/raspberry-pi/wiringpi/functions/
or   
http://wiringpi.com/reference/core-functions/

  
  void pullUpDnControl (int pin, int pud) ;
  
      This sets the pull-up or pull-down resistor mode on the given pin, which should be set as an input. Unlike the
      Arduino, the BCM2835 has both pull-up an down internal resistors. The parameter pud should be; PUD_OFF, (no pull
      up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) The internal pull up/down resistors have a value of
      approximately 50KΩ on the Raspberry Pi.

      This function has no effect on the Raspberry Pi’s GPIO pins when in Sys mode. If you need to activate a
      pull-up/pull-down, then you can do it with the gpio program in a script before you start your program.
  

 example code: 
 
    #include <wiringPi.h>
    
    #define	GPIO_PIN	23  
    if (wiringPiSetupGpio() < 0)
    {
      fprintf (stderr, "Unable to setup wiringPi with GPIO: %s\n", strerror (errno)) ;
      return 1 ;
    }
    pullUpDnControl (GPIO_PIN,PUD_UP);
    
  
http://wiringpi.com/reference/setup/

  
There are four ways to initialise wiringPi.

    int wiringPiSetup (void) ;     -> wiringPi pin numbering scheme
    int wiringPiSetupGpio (void) ; -> GPIO pin numbering scheme
    int wiringPiSetupPhys (void) ; -> physical pin numbering scheme
    int wiringPiSetupSys (void) ;  => uses the /sys/class/gpio interface ; always uses GPIO pin numbering scheme
                                      --> sysmode!!

One of the setup functions must be called at the start of your program or your program will fail to work correctly.


wiringPiSetupSys (void) ;
    
    This initialises wiringPi but uses the /sys/class/gpio interface rather than accessing the hardware directly. This
    can be called as a non-root user provided the GPIO pins have been exported before-hand using the gpio program. Pin
    numbering in this mode is the native Broadcom GPIO numbers – the same as wiringPiSetupGpio() above, so be aware of
    the differences between Rev 1 and Rev 2 boards.

    Note: In this mode you can only use the pins which have been exported via the /sys/class/gpio interface before you
    run your program. You can do this in a separate shell-script, or by using the system() function from inside your
    program to call the gpio program.

    Also note that some functions have no effect when using this mode as they’re not currently possible to action
    unless called with root privileges. (although you can use system() to call gpio to set/change modes if needed)
    
    
  
  

  
