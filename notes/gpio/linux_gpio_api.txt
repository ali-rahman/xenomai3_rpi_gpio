



Linux kernel API
=================

interrupt API
--------------

   https://www.kernel.org/doc/htmldocs/genericirq/pubfunctions.html


    irq_set_irq_type(numero_interruption,  IRQF_TRIGGER_RISING);
     => rising edge triggered  (ending shortcut to ground when having pullup input irq line)
 


  gpiolib api  (#include <linux/gpio.h>)
==================

 gpio_request(GPIO_IN, THIS_MODULE->name))
 
  
 gpio_direction_input(GPIO_IN))
 
 
 gpio_free(GPIO_IN);
  



source:  drivers/gpio/gpiolib.c

/* Drivers MUST set GPIO direction before making get/set calls.  In
 * some cases this is done in early boot, before IRQs are enabled.
 *
 * As a rule these aren't called more than once (except for drivers
 * using the open-drain emulation idiom) so these are natural places
 * to accumulate extra debugging checks.  Note that we can't (yet)
 * rely on gpio_request() having been called beforehand.
 */



/**
 * gpiod_direction_input - set the GPIO direction to input
 * @desc:   GPIO to set to input
 *
 * Set the direction of the passed GPIO to input, such as gpiod_get_value() can
 * be called safely on it.
 *
 * Return 0 in case of success, else an error code.
 */
int gpiod_direction_input(struct gpio_desc *desc)
 ..  => does have nothing saying drain of source ??  => what is used??
 } 




/**
* gpiod_direction_output - set the GPIO direction to output
* @desc:       GPIO to set to output
* @value:      initial output value of the GPIO
*
* Set the direction of the passed GPIO to output, such as gpiod_set_value() can
* be called safely on it. The initial value of the output must be specified
* as the logical value of the GPIO, i.e. taking its ACTIVE_LOW status into
* account.
*
* Return 0 in case of success, else an error code.
*/





./include/linux/gpio/driver.h     -  linux include file

  struct gpio_chip {
      const char      *label;
      struct device       *dev;
      struct module       *owner;
      struct list_head        list;

      int         (*request)(struct gpio_chip *chip,
                          unsigned offset);
      void            (*free)(struct gpio_chip *chip,
                          unsigned offset);
      int         (*get_direction)(struct gpio_chip *chip,
                          unsigned offset);
      int         (*direction_input)(struct gpio_chip *chip,
                          unsigned offset);
      int         (*direction_output)(struct gpio_chip *chip,
                          unsigned offset, int value);
      int         (*get)(struct gpio_chip *chip,
                          unsigned offset);
      void            (*set)(struct gpio_chip *chip,
                          unsigned offset, int value);
      void            (*set_multiple)(struct gpio_chip *chip,
                          unsigned long *mask,
                          unsigned long *bits);
      int         (*set_debounce)(struct gpio_chip *chip,
                          unsigned offset,
                          unsigned debounce);

      int         (*to_irq)(struct gpio_chip *chip,
                          unsigned offset);
  
      void            (*dbg_show)(struct seq_file *s,
                          struct gpio_chip *chip);
      int         base;
      u16         ngpio;
      struct gpio_desc    *desc;
      const char      *const *names;
      bool            can_sleep;
      bool            irq_not_threaded;
      bool            exported;

  #ifdef CONFIG_GPIOLIB_IRQCHIP
      /*
       * With CONFIG_GPIOLIB_IRQCHIP we get an irqchip inside the gpiolib
       * to handle IRQs for most practical cases.
       */
      struct irq_chip     *irqchip;
      struct irq_domain   *irqdomain;
      unsigned int        irq_base;
      irq_flow_handler_t  irq_handler;
      unsigned int        irq_default_type;
  #endif

  #if defined(CONFIG_OF_GPIO)
      /*
       * If CONFIG_OF is enabled, then all GPIO controllers described in the
       * device tree automatically may have an OF translation
       */
      struct device_node *of_node;
      int of_gpio_n_cells;
      int (*of_xlate)(struct gpio_chip *gc,
              const struct of_phandle_args *gpiospec, u32 *flags);
  #endif
  #ifdef CONFIG_PINCTRL
      /*
       * If CONFIG_PINCTRL is enabled, then gpio controllers can optionally
       * describe the actual pin range which they serve in an SoC. This
       * information would be used by pinctrl subsystem to configure
       * corresponding pins for gpio usage.
       */
    struct list_head pin_ranges;
#endif
};





