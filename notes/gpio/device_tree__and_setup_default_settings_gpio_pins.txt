
see notes/raspberrypi/raspberry_pi_BCM2708_or_BCM2835.txt
    to see which dtb files to use for raspberry pi
    
    
https://www.raspberrypi.org/documentation/configuration/device-tree.md

Device Trees
=============

A Device Tree (DT) is a description of the hardware in a system. It should include the name of the base CPU, its memory
configuration, and any peripherals (internal and external). A DT should not be used to describe the software, although
by listing the hardware modules it does usually cause driver modules to be loaded. It helps to remember that DTs are
supposed to be OS-neutral, so anything which is Linux-specific probably shouldn't be there.

A Device Tree represents the hardware configuration as a hierarchy of nodes. Each node may contain properties and
subnodes. Properties are named arrays of bytes, which may contain strings, numbers (big-endian), arbitrary sequences of
bytes, and any combination thereof. By analogy to a filesystem, nodes are directories and properties are files. The
locations of nodes and properties within the tree can be described using a path, with slashes as separators and a
single slash (/) to indicate the root.




https://www.wikiwand.com/en/Device_tree


In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a
particular computer so that the operating system's kernel can use and manage those components, including the CPU or
CPUs, the memory, the buses and the peripherals.
  
  
usage: 
  - not used in Personal computers with the x86 architecture generally do not use device trees, relying instead on various auto
      configuration protocols to discover hardware. 

  - on Arm, device trees have been mandatory for all new SoCs since 2012
  
      Systems which use device trees usually pass a static device tree (perhaps stored in ROM) to the operating system,
      but can also generate a device tree in the early stages of booting. On systems with a boot loader that does not
      support device trees, a static device tree may be installed along with the operating system; the Linux kernel
      supports this approach. 
      
       -> in linux you must staticly pass a device tree!! (dtb file!!)

      => comes down to :  
          - for each specific rpi you must use the right .dtb file
          - have the right drivers compiled for the kernel !!  => the right peripherals configured in the kernel config (drivers)



https://elinux.org/Device_Tree_Reference#What_Is_Device_Tree

 The primary purpose of Device Tree in Linux is to provide a way to describe non-discoverable hardware. This
information was previously hard coded in source code.



https://www.quora.com/What-is-a-Device-Tree-in-Linux

 Device Tree is a data structure for describing the hardware.This is where specific information about the hardware is
conveyed. It can be used to avoid hard coding of every detail of a device into an Operating System. 

 * The device tree is passed to the kernel at boot time. 
 * The kernel then reads through it to learn about what kind of system it is actually running on.
 * informs the kernel about a specific piece of hardware
 * the kernel can select the appropriate driver to handle it      =>harco: a driver module must be compiled otherwise it cannot be selected!!
 
 
The Device Tree is where we inform the kernel about a specific piece of hardware that we have added or removed, so that
the kernel can select the appropriate driver to handle it or refrain from doing so, if the hardware was removed.

".dts" & ".dtsi" files are similar to an XML file which contains data. .dtsi file acts like a header file
and you need to include this in your .dts file if you have added some data in dtsi file which needs to be used by the
dts file.
      

    
say you make a hardware change in your system 
 
   then next time you boot your system, it is this data structure only which will provide your new hardware details to
   the boot handler (which passes it to the kernel) and boot the processor/computer accordingly.
    
  
      
https://stackoverflow.com/questions/17440620/what-is-device-treeadvantages-disadvantages

Some of the advantages include:

    Simple to change the configuration of the system without having to recompile any source code.
    Can easily add support for new hardware (for example if you have a new rev of a board which only changes some minor components, you may be able to run the same software load as previous revs of the board, with only small changes to the .dts file on the new board...)
    Can reuse existing .dts files with include statements, and can override previously defined functionality. For example if you include a dtsi (device tree include file) that defines a hardware component, but has it disabled, then you can just create a new node in your higher level dts file that does nothing but enable that component.
    They (can) provide easy to read and understand descriptions of the hardware, and can give hardware components descriptive names.

Some of the disadvantages includes:

    Not so easy to write a new .dts file, because it requires very detailed knowledge of the hardware.
    Even if you know all the details of the hardware it may be hard to figure out the exact syntax to use to express what you want to do... (i.e. the documentation is lacking in many respects)
    
For me writing a .dts file is almost 100% trial and error, pulling examples from other .dts files and see what it does
and if it gets closer to what I want... Often times the examples are all I have to work with, and there isn't much in
the way of an explanation of what is going on.

   



device tree issues for raspbery pi
----------------------------------



https://www.raspberrypi.org/documentation/configuration/device-tree.md

 A kernel built from the rpi-4.4.y tree (and later) will not function without a DTB, so from the 4.4 releases onwards,
 any kernel without a trailer is assumed to be DT-capable. You can override this by adding a trailer without the DTOK
 flag or by putting device_tree= in config.txt, but don't be surprised if it doesn't work. N.B. A corollary to this is
 that if the kernel has a trailer indicating DT capability then device_tree= will be ignored.

 The loader now supports builds using bcm2835_defconfig, which selects the upstreamed BCM2835 support. This
 configuration will cause bcm2835-rpi-b.dtb and bcm2835-rpi-b-plus.dtb to be built.




https://www.raspberrypi.org/forums/viewtopic.php?t=212977
 You don't actually 'run' dtb files. They are scanned on startup and used to set up the HW in the system.


 DTB files are specific to the model of device they are intended for. Clearly there is a lot of commonality, between Pi
 HW versions so the DTB's are very similar. However the 3B+ has a different Wireless chip, AND a different ethernet
 chip, AND some other changes, so there are clear differences required in the DTB. You could C&P the specific bits from
 one DTB to another, rebuild, and see if that works.

  => boot code of raspberry pi automatically loads right device tree and gives it to the kernel 
     as long  not a specific device tree is specified in  /boot/config.txt
  
    eg. example static config
      
      https://lemariva.com/blog/2018/07/raspberry-pi-xenomai-patching-tutorial-for-kernel-4-14-y

      kernel=${zImage name}
      device_tree=bcm2710-rpi-3-b.dtb

      

https://www.raspberrypi.org/forums/viewtopic.php?f=107&t=120715

view which device tree model is used in a running rpi: 


  cat /proc/device-tree/model
  



Raspberry Pi uses Device Tree(DT) using /boot/config.txt
--------------------------------------------------------

Raspberry Pi's latest kernels and firmware, including Raspbian and NOOBS releases, now use a Device Tree (DT) to manage
some resource allocation and module loading by default. This was implemented to alleviate the problem of multiple
drivers contending for system resources, and to allow HAT modules to be auto-configured.

The current implementation is not a pure Device Tree system – there is still board support code that creates some
platform devices – but the external interfaces (I2C, I2S, SPI), and the audio devices that use them, must now be
instantiated using a Device Tree Blob (DTB) passed to the kernel by the loader (start.elf).

The main impact of using Device Tree is to change:
- from "everything on", relying on module blacklisting to manage contention, 
- to "everything off unless requested by the DTB". 
   In order to continue to use external interfaces and the peripherals that attach to them, you will need to add some new
   settings to your config.txt.
   => see if you need to add some device or external interface => add a line to /boot/config.txt 

example:
  
  add the line 
     dtparam=spi=on                                            dt => device tree
  to /boot/config.txt to enable the spi interface on boot
  
  
  or add to config.txt
    dtparam=gpio_out_pin=16
    dtparam=gpio_in_pin=17
    dtparam=gpio_in_pull=down
  to configure some intitial state for gpio ports  for specific device :
    see :https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README
            
            Name:   lirc-rpi
            Info:   Configures lirc-rpi (Linux Infrared Remote Control for Raspberry Pi)
                    Consult the module documentation for more details.
            Load:   dtoverlay=lirc-rpi,<param>=<val>
            Params: gpio_out_pin            GPIO for output (default "17")

                    gpio_in_pin             GPIO for input (default "18")

                    gpio_in_pull            Pull up/down/off on the input pin
                                            (default "down")

                    sense                   Override the IR receive auto-detection logic:
                                             "0" = force active-high
                                             "1" = force active-low
                                             "-1" = use auto-detection
                                            (default "-1")

                    softcarrier             Turn the software carrier "on" or "off"
                                            (default "on")

                    invert                  "on" = invert the output pin (default "off")

                    debug                   "on" = enable additional debug messages
            (default "off")
            
            
  => for more details see : https://www.raspberrypi.org/documentation/configuration/device-tree.md
             https://www.raspberrypi.org/documentation/configuration/config-txt/README.md
             



http://www.wikiwand.com/en/Device_tree
  
  The device tree is a data structure for describing hardware, which originated from Open Firmware. The data structure
  can hold any kind of data as internally it is a tree of named nodes and properties. Nodes contain properties and
  child nodes, while properties are name–value pairs.
  



# fdtdump /boot/bcm2709-rpi-2-b.dtb |grep gpio
        gpio = "/soc/gpio@7e200000";
        gpio@7e200000 {
            compatible = "brcm,bcm2835-gpio";
            gpio-controller;
            #gpio-cells = <0x00000002>;
            cs-gpios = <0x00000000 0x00000000>;
            compatible = "gpio-leds";
                gpios = <0x00000010 0x0000002f 0x00000000>;
                gpios = <0x00000010 0x00000023 0x00000000>;
        gpiomem {
            compatible = "brcm,bcm2835-gpiomem";
        act_led_gpio = <0x0000001e 0x6770696f 0x733a3400>;
        pwr_led_gpio = <0x0000001f 0x6770696f 0x733a3400>;
        gpio = "/soc/gpio@7e200000";
        sdhost_pins = "/soc/gpio@7e200000/sdhost_pins";
        spi0_pins = "/soc/gpio@7e200000/spi0_pins";
        i2c0_pins = "/soc/gpio@7e200000/i2c0";
        i2c1_pins = "/soc/gpio@7e200000/i2c1";
        i2s_pins = "/soc/gpio@7e200000/i2s";
        
        
=> gpio device :     "/soc/gpio@7e200000"    




IMPORTANT: device tree is also visible in sysfs : 

# cat /sys/devices/platform/soc/3f200000.gpio/uevent
DRIVER=pinctrl-bcm2835
OF_NAME=gpio
OF_FULLNAME=/soc/gpio@7e200000
OF_COMPATIBLE_0=brcm,bcm2835-gpio
OF_COMPATIBLE_N=1
MODALIAS=of:NgpioT<NULL>Cbrcm,bcm2835-gpio


NOTE: OF stands for  open firmare




https://github.com/fivdi/onoff/wiki/Enabling-Pullup-and-Pulldown-Resistors-on-The-Raspberry-Pi

  using device tree setup in config.txt to configure gpio pins
  
  
   Enabling Pullup and Pulldown Resistors on The Raspberry Pi
    
       In January 2015 the first version of the Raspbian operating system with built in support for the device tree was
       released. The device tree is a data structure for describing hardware. Many aspects of the hardware can be
       described in this data structure rather than being hard coded into the operating system.

       Device tree overlays can be used to apply changes to the kernel's internal device tree representation. For
       example, a device tree overlay can be used to enable the pullup or pulldown resistor for a GPIO.

       Lets say that the pullup and pulldown resistors for GPIO #7, #8, and #9 need to be configured as shown in the
       following table:
       
       GPIO # 	Header Pin # 	Pull Type
       7 	26 	pulldown
       8 	24 	pulldown
       9 	21 	pullup

       The device tree source file mygpio-overlay.dts for the device tree overlay to acheive this is as follows:

/dts-v1/;
/plugin/;

/ {
    compatible = "brcm,bcm2708";

    fragment@0 {
        target = <&gpio>;
        __overlay__ {
            pinctrl-names = "default";
            pinctrl-0 = <&my_pins>;

            my_pins: my_pins {
                brcm,pins = <7 8 9>;     /* gpio no. */
                brcm,function = <0 0 0>; /* 0:in, 1:out */
                brcm,pull = <1 1 2>;     /* 2:up 1:down 0:none */
            };
        };
    };
};

The device tree compiler compiles the source into a binary form. The compiler itself is installed with the following command:

   sudo apt-get install device-tree-compiler

       
And the overlay is compiled with the following command:

    dtc -@ -I dts -O dtb -o mygpio-overlay.dtb mygpio-overlay.dts

The device tree blob mygpio-overlay.dtb produced by the compiler is the binary and should be copied to directory /boot/overlays.

The last piece of the puzzle is adding the following line at the end of /boot/config.txt so that the overlay gets loaded at boot time:

     device_tree_overlay=overlays/mygpio-overlay.dtb

For additional information about the device tree see Device Trees, Overlays and Parameters

more details: https://www.raspberrypi.org/documentation/configuration/device-tree.md


NOTE: on rpi dtc and fdtdump are by default installed in raspbian

 fdtdump /boot/bcm2709-rpi-2-b.dtb | less
       
       








https://www.raspberrypi.org/documentation/configuration/config-txt.md

 describes /boot/config.txt
  
  => in  config.txt you can enable/disable devices in device tree!!
  
  


https://www.raspberrypi.org/documentation/configuration/device-tree.md

 Device Trees, overlays, and parameters

 Raspberry Pi's latest kernels and firmware, including Raspbian and NOOBS releases, now by default use Device Tree (DT)
to manage some resource allocation and module loading.
 

The main impact of using Device Tree is to change from everything on, relying on module blacklisting to manage
contention, to everything off unless requested by the DTB. In order to continue to use external interfaces and the
peripherals that attach to them, you will need to add some new settings to your config.txt.

e.g. in /boot/config.txt 

# Uncomment some or all of these to enable the optional hardware interfaces
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on



https://github.com/raspberrypi/linux/blob/rpi-3.18.y/arch/arm/boot/dts/bcm2709-rpi-2-b.dts

 => contains source of  /boot/bcm2709-rpi-2-b.dtb
  
  
  /dts-v1/;

  /include/ "bcm2709.dtsi"

  / {
  	compatible = "brcm,bcm2709";
  	model = "Raspberry Pi 2 Model B";

  	aliases {
  		soc = &soc;
  		spi0 = &spi0;
  		i2c0 = &i2c0;
  		i2c1 = &i2c1;
  		i2s  = &i2s;
  		gpio = &gpio;
  		intc = &intc;
  		leds = &leds;
  		sound = &sound;
  };
  
  ...




  
  
  
